

1. Activity Selection Problem

Problem Statement - given n activities with thier start and finish times. Select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time. (i.e. their is no time conflicts)

Example - 

	Activity	A1		A2		A3
	Start		12		10		20
	Finish		25		20		30
	
	A2 -> A3		Total = 2 activities
	
Greedy Approach - 
1. Sort the activities according to their finishing time.
2. Select the first activity from the sorted array and print it.
3. Do the following for remaining activities in the sorted array.
	If the start time of the activity is greated than or equal to the finish time of previously selected activity then select this activity and print it. 

Lets take an example and do above steps -   

	Activity	A1		A2		A3		A4		A5		A6
	Start		0		3		1		5		5		8
	Finish		6		4		2		9		7		9

1. Sort the activities according to their finishing time.
	
	Activity	A3		A2		A1		A5		A6		A4
	Start		1		3		0		5		8		5
	Finish		2		4		6		7		9		9
		
2. Select the first activity from the sorted array and print it.

	Answer = A3
	
3. Do the following for remaining activities in the sorted array.
	If the start time of the activity is greated than or equal to the finish time of previously selected activity then select this activity and print it. 

	Answer = A3 -> A2 -> A5 -> A6
	
	Total = 4 activities
	
Code - 

In below code it is assumed that the activities are already sorted according to their finish time - 

// The following implementation assumes that the activities
// are already sorted according to their finish time
import java.util.*;
import java.lang.*;
import java.io.*;

class ActivitySelection
{
	// Prints a maximum set of activities that can be done by a single
	// person, one at a time.
	// n --> Total number of activities
	// s[] --> An array that contains start time of all activities
	// f[] --> An array that contains finish time of all activities
	public static void printMaxActivities(int s[], int f[], int n)
	{
	int i, j;
	
	System.out.print("Following activities are selected : n");
	
	// The first activity always gets selected
	i = 0;
	System.out.print(i+" ");
	
	// Consider rest of the activities
	for (j = 1; j < n; j++)
	{
		// If this activity has start time greater than or
		// equal to the finish time of previously selected
		// activity, then select it
		if (s[j] >= f[i])
		{
			System.out.print(j+" ");
			i = j;
		}
	}
	}
	
	// driver program to test above function
	public static void main(String[] args)
	{
	int s[] = {1, 3, 0, 5, 8, 5};
	int f[] = {2, 4, 6, 7, 9, 9};
	int n = s.length;
		
	printMaxActivities(s, f, n);
	}
	
}


How to implement when given activities are not sorted - 

// Java program for activity selection problem
// when input activities may not be sorted.
import java.io.*;
import java.util.*;

// A job has a start time, finish time and profit.
class Activity 
{
int start, finish;

// Constructor
public Activity(int start, int finish)
{
	this.start = start;
	this.finish = finish;
}
}

// class to define user defined comparator
class Compare 
{

// A utility function that is used for sorting
// activities according to finish time
static void compare(Activity arr[], int n)
{
	Arrays.sort(arr, new Comparator<Activity>()
				{
				@Override
				public int compare(Activity s1, Activity s2)
				{
					return s1.finish - s2.finish;
				}
				});
}
}

// Driver class
class GFG {

// Returns count of the maximum set of activities that
// can
// be done by a single person, one at a time.
static void printMaxActivities(Activity arr[], int n)
{
	// Sort jobs according to finish time
	Compare obj = new Compare();
	obj.compare(arr, n);
	System.out.println(
	"Following activities are selected :");

	// The first activity always gets selected
	int i = 0;
	System.out.print("(" + arr[i].start + ", "
					+ arr[i].finish + "), ");

	// Consider rest of the activities
	for (int j = 1; j < n; j++) 
	{

	// If this activity has start time greater than
	// or equal to the finish time of previously
	// selected activity, then select it
	if (arr[j].start >= arr[i].finish)
	{
		System.out.print("(" + arr[j].start + ", "
						+ arr[j].finish + "), ");
		i = j;
	}
	}
}

// Driver code
public static void main(String[] args)
{

	int n = 6;
	Activity arr[] = new Activity[n];
	arr[0] = new Activity(5, 9);
	arr[1] = new Activity(1, 2);
	arr[2] = new Activity(3, 4);
	arr[3] = new Activity(0, 6);
	arr[4] = new Activity(5, 7);
	arr[5] = new Activity(8, 9);

	printMaxActivities(arr, n);
}
}


Time Complexity: 

	For sorted input: O(n)
	For unsorted input: O(nlog)
	
	n = number of activities
	